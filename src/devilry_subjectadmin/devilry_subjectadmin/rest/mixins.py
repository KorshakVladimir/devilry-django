from djangorestframework.compat import apply_markdown
from djangorestframework.views import _remove_leading_indent
from django.utils.safestring import mark_safe
from cStringIO import StringIO


class SelfdocumentingMixin(object):
    '''
    ``djangorestframework`` view mixin that makes it more convenient to provide
    docs. Docs can be provided in the following ways:

        - Add to the class docstring.
        - Add to the docstring for the REST methods.
        - Add ``<methodname>_resdocs()`` methods (see example below).

    All docs are formatted using Markdown. Design rationale:

        - Use markdown to make it backwards compatible with the default
          self-documenting features of djangorestframework, and because
          markdown is a good and easy-to-extend markup language for HTML
          generation.
        - 

    Simple example::

        from djangorestframework.views import View
        class MyView(SelfdocumentingMixin, View):
            """
            This appears at the top of the autogenerated docs.
            """
            form = SomeForm

            def post(self, request):
                """
                Create something. Shows up under the "POST" heading.
                """
                pass


    Get docs from a method instead of from the docstring. Useful when
    generating docs, or when inheriting REST methods (E.g.: from ModelView)::

        class MyView(SelfdocumentingMixin, View):
            def get(self, request):
                pass

            def get_restdocs(self):
                return """
                This will be used a the docs for the GET method, just as if we
                provided a docstring to ``get()``, however with this method of
                providing docs, we can generate/program the contents of the
                docstring.
                """

    Provide template variables for the docstrings::

        class MyView(SelfdocumentingMixin, View):

            def put(self):
                """
                Update something.

                ## Parameters:
                {parametertable}
                """

            def postprocess_docs(self, docs):
                return docs.format(parametertable=self.docformat_form())
    '''
    def get_unformatted_docs_for_method(self, methodname):
        """
        Get docs for the given method. Tries to find docs in the following
        places, in the followin order:

            - ``self.<methodname>_resdocs()`` (if it exists)
            - ``self.<methodname>.__doc__``

        :param methodname: Lower-case method name (E.g.: get, post, ...)
        :return:
            Docs as a string with leading indent removed
            (:meth:`.remove_leading_indent_from_docs`), or ``None`` if no docs
            was found.
        """
        if not hasattr(self, methodname):
            return None
        docsmethodname = methodname + '_restdocs'
        if hasattr(self, docsmethodname):
            docs = getattr(self, docsmethodname)()
        else:
            docs = getattr(self, methodname).__doc__
        if docs:
            docs = self.remove_leading_indent_from_docs(docs)
        return docs

    def remove_leading_indent_from_docs(self, docs):
        """
        Remove leading indentation from the given docs.
        """
        return _remove_leading_indent(docs)

    def docformat_form(self, boundform=None, override_helptext={}):
        """
        Document in the given bound form as a html table.

        :param boundform:
            Defaults to ``get_bound_form()`` if it is ``None``.
        :param override_helptext:
            Override helptext for specific fields. Keys are fieldnames,
            and values are overridden helptext for that field.

        .. seealso:: :meth:`.postprocess_docs`.
        """
        out = StringIO()
        out.write('<table>')
        form = boundform or self.get_bound_form()
        for field in form:
            out.write('<tr>')
            if field.field.required:
                meta = 'required'
            else:
                meta = 'optional'
            out.write('<td><strong>{field.name}</strong><br/><small>{meta}</small></td>'.format(field=field,
                                                                                                meta=meta))
            help_text = override_helptext.get(field.name, field.field.help_text)
            out.write('<td>{help_text}</td>'.format(help_text=help_text))
            out.write('</tr>')
            #print '{field.name!r} {field.field.help_text!r} {field.field.required!r}'.format(field=field)
        out.write('</table>')
        table = out.getvalue()
        return table

    def postprocess_docs(self, htmldocs):
        """
        Postprocess docs after they have been converted to HTML. Override this
        method to add generated data to the docs. Typically used with
        :meth:`.docformat_form`::

            from djangorestframework.views import View
            class MyView(SelfdocumentingMixin, View):
                form = SomeForm
                def post(self, request):
                    \"\"\"
                    Create something.

                    ## Parameters
                    {parametertable}
                    \"\"\"

                def postprocess_docs(self, docs):
                    return docs.format(parametertable=self.docformat_form())
        """
        return htmldocs

    def convert_docs_to_html(self, docs):
        """
        Convert the given docs to to html.
        Defaults to formatting the docs using markdown, but you can override
        this method if you want something else.

        If you do not want to use markdown, you should override this method,
        :meth:`.format_docs_methodheading` and perhaps
        :meth:`.get_all_unformatted_docs`.
        """
        return apply_markdown(docs)

    def format_methodheading_for_docs(self, methodname):
        """
        Format the documentation heading for the given method. Defaults to a
        mardown-formatted H1 heading containing the uppercased methodname.

        :param methodname: The method name in lowercase.

        .. seealso:: meth:`convert_docs_to_html`.
        """
        return '\n# {methodname}\n'.format(methodname=methodname.upper())


    def get_unformatted_docs_for_class(self):
        return self.remove_leading_indent_from_docs(self.__doc__ or '')

    def get_unformatted_docs_for_all_methods(self):
        """
        Return the docs for all methods as a dict containing an entry for each
        method with docs (the key is the methodname, and the value is the
        docs).
        """
        method_docs = {}
        for methodname in self.allowed_methods:
            methodname = methodname.lower()
            docs = self.get_unformatted_docs_for_method(methodname)
            if docs:
                method_docs[methodname] = '{heading}{docs}'.format(heading=self.format_methodheading_for_docs(methodname),
                                                                   docs=docs)
        return method_docs

    def get_all_unformatted_docs(self):
        """
        Merge the response from :meth:`.get_unformatted_docs_for_class` and
        :meth:`get_unformatted_docs_for_all_methods` into a single string.
        """
        docs = self.get_unformatted_docs_for_class()
        method_docs = self.get_unformatted_docs_for_all_methods()
        if method_docs:
            docs = docs + '\n\n' + '\n\n'.join([method_docs[key] for key in sorted(method_docs.keys())])
        return docs

    def get_docs_html(self):
        """
        Get the HTML-formatted docs for this view.
        """
        docs = self.get_all_unformatted_docs()
        docs = self.convert_docs_to_html(docs)
        docs = self.postprocess_docs(docs)
        return docs

    def get_description(self, html=False):
        html = self.get_docs_html()
        return mark_safe(html)
