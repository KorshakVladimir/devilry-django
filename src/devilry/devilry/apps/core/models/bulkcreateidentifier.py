from datetime import datetime
from random import randint
from south.modelsinspector import add_introspection_rules
from django.db import models



class BulkCreateManagerMixin(object):
    """
    A mixin for ``django.models.Manager`` that makes it a bit easier to
    implement the workflow from the example in :class:`.BulkCreateIdentifier`.
    """
    def filter_by_bulkcreateidentifier(self, bulkcreate_identifier):
        return self.get_queryset().filter(
            bulkcreate_identifier=bulkcreate_identifier)


class BulkCreateIdentifierField(models.ForeignKey):
    """
    A ``django.db.models.ForeignKey`` subclass that sets the related
    model to :class:`devilry.apps.core.models.BulkCreateIdentifier`
    and sane values for ``related_name`` and ``on_delete``.
    """
    def __init__(self):
        super(BulkCreateIdentifierField, self).__init__(
            BulkCreateIdentifier,
            null=True, blank=True,
            related_name='+', on_delete=models.SET_NULL)



add_introspection_rules([], ["^devilry\.apps\.core\.models\.bulkcreateidentifier\.BulkCreateIdentifier"])



class BulkCreateIdentifier(models.Model):
    """
    When using the ``django.db.models.Manager.bulk_create()`` on models with
    automatic ID, we have no way of getting the created objects. A method of
    avoiding this is to use a unique ``bulkcreate_id`` shared by all objects created
    by the operation. After bulk creating the objects, we can perform a simple
    query using the ``bulkcreate_id`` to get all the created objects. This works
    well, but it introduces a new challenge: we have to make sure the ``bulkcreate_id``
    is unique.

    Databases have great support for efficiently creating automatic IDs, and Django
    supports this in the default primary key field, so we can use a table where we append
    entries and use the autogenerated primary key as ``bulkcreate_id``. This class
    implements that functionality. We include a ``timestamp`` field mainly to make it
    possible to safely delete old 

    Example::
        from django.db import models

        from devilry.apps.core.models import BulkCreateIdentifier
        from devilry.apps.core.models.bulkcreateidentifier import BulkCreateIdentifierField
        from devilry.apps.core.models.bulkcreateidentifier import BulkCreateManagerMixin

        class MyQuerySet(models.query.QuerySet):
            pass

        class MyManager(models.Manager, BulkCreateManagerMixin):
            def get_queryset(self):
                return MyQuerySet(self.model, using=self._db)

            def create_many(self, *names):
                bulkcreate_identifier = BulkCreateIdentifier.objects.create()
                def makemodel(name):
                    return MyModel(name=name,
                        bulkcreate_identifier=bulkcreate_identifier)
                mymodels = map(makemodel, names)
                self.bulk_create(mymodels)
                return self.filter_by_bulkcreateidentifier(bulkcreate_identifier)

        class MyModel(models.Model):
            name = models.CharField(max_length=100)
            bulkcreate_identifier = BulkCreateIdentifierField()
            objects = MyManager()

        created_objects = MyModel.objects.create_many('Test One', 'Test Two')

    The motivation for this solution is explained in the
    *Bulk create groups, candidates efficiently?* section of
    `Issue 554 <https://github.com/devilry/devilry-django/issues/554>`_.
    """
    timestamp = models.DateTimeField(auto_now_add=True)

    class Meta:
        app_label = 'core'
        ordering = ['timestamp']