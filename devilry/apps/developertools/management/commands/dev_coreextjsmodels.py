from optparse import make_option
from os.path import join, abspath, exists
from os import getcwd, makedirs

from django.core.management.base import BaseCommand, CommandError

from devilry.apps.administrator import restful as administrator_restful
from devilry.apps.extjshelpers.modelintegration import (restfulcls_to_extjsmodel,
                                                        get_extjs_modelname)

class Command(BaseCommand):
    help = 'Create a databse of static data for the selenium tests.'
    option_list = BaseCommand.option_list + (
        make_option('-r', '--devilry-reporoot',
            dest='reporoot',
            default=getcwd(),
            help='Devilry repository root. The direcotory that contains the devilry/ subdirectory (which contains the apps/ subdirectory).')
    ,)

    fileheader = '// Autogenerated by the dev_coreextjsmodels script. DO NOT CHANGE MANUALLY'

    def handle(self, *args, **options):
        self.reporoot = options['reporoot']
        if not exists(join(self.reporoot, 'devilry', 'apps')):
            raise CommandError('Invalid --devilry-reporoot: {0}'.format(abspath(self.reporoot)))
        self._create_files_for_module(administrator_restful)

    def _create_files_for_module(self, restfulmodule):
        modelnames = []
        for clsname in restfulmodule.__all__:
            restfulcls = getattr(administrator_restful, clsname)
            js = self._get_js_for_model(restfulcls)
            modelname = get_extjs_modelname(restfulcls)
            self._create_extjsclassfile(modelname, js)
            modelnames.append(modelname)
        self._create_requireall_file(modelnames)

    def _create_requireall_file(self, modelnames):
        requires = ',\n'.join(["'{0}'".format(modelname) for modelname in modelnames])

    def _get_js_for_model(self, restfulcls):
        result_fieldgroups =  restfulcls._meta.simplified._meta.resultfields.additional_aslist()
        js = restfulcls_to_extjsmodel(restfulcls, result_fieldgroups)
        return js + ';'

    def _create_extjsclassfile(self, modelname, js):
        clspathsplit = modelname.split('.')
        if not clspathsplit[0] == 'devilry' and clspathsplit[1] == 'apps':
            raise CommandError('Invalid class name: {0}.'.format(modelname))
        appname = clspathsplit[2]
        clsname = clspathsplit[-1]
        dirname = join(self.reporoot, 'devilry', 'apps', appname, 'static', 'extjs_classes', 'apps', appname, 'simplified')
        path = join(dirname, clsname + '.js')
        if not exists(dirname):
            makedirs(dirname)
        open(path, 'w').write('{0}\n{1}'.format(self.fileheader, js))
