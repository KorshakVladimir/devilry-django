# Base buildout for development. See devenv/ for how to extend it,
# and copy devenv/ if you want to experiment with new settings.

[buildout]
extends = buildout-base.cfg
parts +=
    create_init_py
    settings_dev
    django_dev
    settings_test
    django_test
    settings_noextjsdebug
    django_noextjsdebug
    settings_extjsbuild
    django_extjsbuild
    omelette
    sphinxbuilder
    pydev
eggs +=
    selenium
    fabric
    devilry_developer
    devilry_sandbox
    ipython
    readline
    whoosh
    django-celery-email
#    pyyaml

[versions]
# NOTE: This section extends buildout-base.cfg versions
dingus = 0.3.3
hexagonit.recipe.download = 1.5.0
django-rosetta = 0.6.8
Whoosh = 2.4.1
collective.recipe.pydevproject = 0.1

# Fabric and requirements
fabric = 1.4.2
pycrypto = 2.6
ssh = 1.7.14
zc.buildout = 1.7.1



# SETUP ECLIPSE PYDEV
# 1. Initialize for Development environment in ``devenv/``::
# 
#    $ cd devenv/
#    $ fab bootstrap
# 
# 2. Open Eclipse and go to ``Preferences->PyDev->Interpreter Python``, add a
#    Python interpreter named ``devilrypy`` with executable set to
#    ``/path/to/repo/devenv/venv/bin/python``. Make sure the
#    core libraries is checked. On OS X, these are not automatically selected,
#    and you have to select ``/System/Libraries/Frameworks/Python.framework/Versions/2.7/lib/python2.7``
#    manually.
# 3. Move ``.project`` and ``.pydevproject`` from ``devenv/`` to the reporoot.
# 4. Select ``File->Import->General->Existing Projects into Workspace``, and use
#    ``/path/to/repo`` as root directory.
# 5. On each re-run of buildout, re-do step 3.
[pydev]
recipe = collective.recipe.pydevproject
eggs = ${buildout:eggs}
src = src
name = devilry
python_version = python 2.7
python_interpreter = devilrypy


[sphinxbuilder]
recipe = collective.recipe.sphinxbuilder
source = ${buildout:reporoot-directory}/docs
build = ${buildout:directory}/parts/docs
interpreter = ${buildout:bin-directory}/pythonwrapper


# Create the log/ dir if it does not exist
[create_dirs]
recipe = z3c.recipe.mkdir
paths = log

[omelette]
recipe = collective.recipe.omelette
eggs = ${buildout:eggs}

[sources]
# Extends sources in buildout-base.cfg with apps/libs that are under
# development, locally in this repo, or in external git repos
#django_extjs4 = git https://github.com/espenak/django_extjs4.git pushurl=git@github.com:espenak/django_extjs4.git
#djangosenchatools = git git@github.com:espenak/djangosenchatools.git
#django_seleniumhelpers = git https://github.com/espenak/django_seleniumhelpers.git pushurl=git@github.com:espenak/django_seleniumhelpers.git
#solr_recipe = git https://github.com/espenak/solr_recipe.git pushurl=git@github.com:espenak/solr_recipe.git
devilry_developer = fs devilry_developer
devilry_sandbox = fs devilry_sandbox
devilry_examiner = fs devilry_examiner
#django_devserver = git https://github.com/dcramer/django-devserver.git rev=0.4.0




#################################################################
#
# Autogenerate django setting files, and wrappers for manange.py
# - Each wrapper is configured with its own settings file, which
#   we generate in the ``settings_*`` sections. Each settings
#   file is just thin wrappers that define the settings that
#   have to be relative to the current working directory
#
#################################################################

# __init__.py is required to be able to import the settings-modules we create below
[create_init_py]
recipe = devilry_developer:staticfile
path = ${buildout:directory}/__init__.py


# bin/django_dev.py: the replacement for ``manage.py`` for normal development
#                    tasks, like ``runserver`` and ``test``
[settings_dev]
recipe = devilry_developer:settingsfile
path = ${buildout:directory}/settings_dev.py
basemodule = devilry_developer.settings.base

[django_dev]
recipe = djangoprojectrecipe
settings = settings_dev
eggs = ${buildout:eggs}
extra-paths = ${buildout:directory}
control-script = django_dev.py


# For running the tests (bin/django_test.py test)
[settings_test]
recipe = devilry_developer:settingsfile
path = ${buildout:directory}/settings_test.py
basemodule = devilry_developer.settings.test

[django_test]
recipe = djangoprojectrecipe
settings = settings_test
eggs = ${buildout:eggs}
extra-paths = ${buildout:directory}
control-script = django_test.py


# django_noextjsdebug: Use this to run ExtJS in production mode.
# - For demos and cross-device/cross-platform production testing::
#
#      bin/django_noextjsdebug.py runserver 0.0.0.0:9000 --insecure
#
[settings_noextjsdebug]
recipe = devilry_developer:settingsfile
path = ${buildout:directory}/settings_noextjsdebug.py
basemodule = devilry_developer.settings.noextjsdebug

[django_noextjsdebug]
recipe = djangoprojectrecipe
settings = settings_noextjsdebug
eggs = ${buildout:eggs}
extra-paths = ${buildout:directory}
control-script = django_noextjsdebug.py


# django_extjsbuild: Used when we build ExtJS apps.
[settings_extjsbuild]
recipe = devilry_developer:settingsfile
path = ${buildout:directory}/settings_extjsbuild.py
basemodule = devilry_developer.settings.extjsbuild

[django_extjsbuild]
recipe = djangoprojectrecipe
settings = settings_extjsbuild
eggs = ${buildout:eggs}
extra-paths = ${buildout:directory}
control-script = django_extjsbuild.py
