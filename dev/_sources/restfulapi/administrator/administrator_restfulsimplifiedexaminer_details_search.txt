.. _administrator_restfulsimplifiedexaminer_details_search:

=============================================================================
GET /administrator/restfulsimplifiedexaminer/
=============================================================================

Search for examiners.

The underlying data model searched is defined in :class:`devilry.apps.core.models.Examiner`.
The :ref:`simplified` that the server forwards this request to is
:meth:`devilry.apps.administrator.simplified.simplifiedexaminer.SimplifiedExaminer.search`.

The request parameters (below) all modify the result of the search. They are
applied in the following order:

    1. The ``query`` is executed.
    2. The result of the query is filtered through the ``filters``.
    3. The result of the filtering is ordered as specified in ``orderby``.
    4. The result of the ordering is limited by ``start`` and ``limit``.


**************************
Request
**************************

Request example
###############

.. code-block:: javascript

    GET /administrator/restfulsimplifiedexaminer/

    {
        query: 'a query string',
        filters: [{field:"assignmentgroup", comp:"<=", value:15},
                      {field:"assignmentgroup__parentnode", comp:">=", value:15},
                      {field:"assignmentgroup__parentnode__parentnode", comp:"contains", value:15}],
        orderby: ["user", "-id", "assignmentgroup"],
        start: 10,
        limit: 100
    }



Optional request parameters
###########################

Optional request parameters are encoded as a JSON object and sent as the
request body as shown in the example above.

query
-----
A string to search for. If this is empty or not given, all
examiners that the authenticated user has access to is
returned.

If the string is not empty, the ``query``-string is split on whitespace,
resulting in a list of words. Every *word* in the list is searched for
*case-insensitive* matches within the following fields:

    





filters
-------

Filters can be used to perform complex queries. The ``filters`` parameter is a
list of filters, where each filter is a map with the following entries:

    field
        A field name.
    comp
        A comparison operator.
    value
        The value to filter on.

Example:

    .. code-block:: javascript

        [{field:"assignmentgroup", comp:"<=", value:15},
         {field:"assignmentgroup__parentnode", comp:">=", value:15},
         {field:"assignmentgroup__parentnode__parentnode", comp:"contains", value:15}]

examiners can be filtered on the following *fields*:


    assignmentgroup
        Actual location of the field:
            :class:`devilry.apps.core.models.AssignmentGroup`
        About the field:
            Autogenerated identifier.
        Type
            Integer
        Supported comparison operators:
            ``startswith``, ``contains``, ``>=``, ``<=``, ``icontains``, ``iexact``, ``endswith``, ``exact``, ``<``, ``>``.

    assignmentgroup__parentnode
        Actual location of the field:
            :class:`devilry.apps.core.models.Assignment`
        About the field:
            Autogenerated identifier.
        Type
            Integer
        Supported comparison operators:
            ``startswith``, ``contains``, ``>=``, ``<=``, ``icontains``, ``iexact``, ``endswith``, ``exact``, ``<``, ``>``.

    assignmentgroup__parentnode__parentnode
        Actual location of the field:
            :class:`devilry.apps.core.models.Period`
        About the field:
            Autogenerated identifier.
        Type
            Integer
        Supported comparison operators:
            ``startswith``, ``contains``, ``>=``, ``<=``, ``icontains``, ``iexact``, ``endswith``, ``exact``, ``<``, ``>``.

    assignmentgroup__parentnode__parentnode__parentnode
        Actual location of the field:
            :class:`devilry.apps.core.models.Subject`
        About the field:
            Autogenerated identifier.
        Type
            Integer
        Supported comparison operators:
            ``startswith``, ``contains``, ``>=``, ``<=``, ``icontains``, ``iexact``, ``endswith``, ``exact``, ``<``, ``>``.

    id
        Actual location of the field:
            :class:`devilry.apps.core.models.Examiner`
        About the field:
            Autogenerated identifier.
        Type
            Integer
        Supported comparison operators:
            ``startswith``, ``contains``, ``>=``, ``<=``, ``icontains``, ``iexact``, ``endswith``, ``exact``, ``<``, ``>``.

    user
        Actual location of the field:
            :class:`django.contrib.auth.models.User`
        About the field:
            Autogenerated identifier.
        Type
            Integer
        Supported comparison operators:
            ``startswith``, ``contains``, ``>=``, ``<=``, ``icontains``, ``iexact``, ``endswith``, ``exact``, ``<``, ``>``.







exact_number_of_results
-----------------------
If given, this must be a positive integer (including 0), which specifies the exact number of
expected results. This enables searches that you know should fail if they do not get this
exact number of results, such as filtering for a User by unique username
instead of its numeric ID (where you should expect exactly one result).


orderby
-------
List of fieldnames. Order the result by these fields.
Fieldnames can be prefixed by ``'-'`` for descending ordering.

start
-----
After query, filters and orderby have been executed, the result is limited to
the values from *start* to *start+limit*. Start defalts to ``0``.

limit
-----
Limit results to this number of items. Defaults to ``50``.


result_fieldgroups
------------------
A list of group names. Each group adds an additional set of fields to the
results of the search. The following group names are available:

    userdetails
        *Expands to the following fields:*
        
            user__username
                Actual location of the field:
                    :class:`django.contrib.auth.models.User`
                About the field:
                    Required. 30 characters or fewer. Letters, numbers and @/./+/-/_ characters
                Type
                    String
        
            user__email
                Actual location of the field:
                    :class:`django.contrib.auth.models.User`
                About the field:
                    
                Type
                    String
        
            user__devilryuserprofile__full_name
                Actual location of the field:
                    :class:`devilry.apps.core.models.DevilryUserProfile`
                About the field:
                    List of many values.
                Type
                    List of strings
        










*********************
Response
*********************

On success
##########


Example
------------------------

*note that the is wrong in the example. The id is always unique. However, the
example is generated from a non-varying dataset.*

.. code-block:: javascript

    200 OK

    {
        total: 20,
        items: [
            { user: 15,
              id: 15,
              assignmentgroup: 15 },
            { user: 15,
              id: 15,
              assignmentgroup: 15 },
            ...
        ]
    }


Success response details
------------------------

Responds with HTTP code *200* and a *JSON encoded* dict containing the list of
results and the *total* number of items found before applying ``limit`` and
``start``. Each result in the
list is a JSON object where the *key* is a fieldname and the associated value is
the *value* for that field. The result always contains the following fields:

    
        user
            Actual location of the field:
                :class:`django.contrib.auth.models.User`
            About the field:
                Autogenerated identifier.
            Type
                Integer
    
        id
            Actual location of the field:
                :class:`devilry.apps.core.models.Examiner`
            About the field:
                Autogenerated identifier.
            Type
                Integer
    
        assignmentgroup
            Actual location of the field:
                :class:`devilry.apps.core.models.AssignmentGroup`
            About the field:
                Autogenerated identifier.
            Type
                Integer
    


However, there may be more fields if specified with the ``result_fieldgroups``
request parameter.




On error
########

On errors, we respond with one of the :ref:`restful_api_error_statuscodes`.
